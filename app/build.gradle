apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'AndResGuard'

ext {
    koinVersion = '2.0.1'
    retrofitVersion = '2.6.0'
    okHttpVersion = '4.3.1'
    roomVersion = "2.2.3"
    securityCryptoVersion = "1.0.0-alpha02"
    rootBearVersion = '0.0.7'
    timberVersion = '4.7.1'
    recyclerViewVersion = '1.1.0'
    rxPermissionVersion = '0.10.2'
    andResGuard_sevenzip_version = "1.2.17"
}

andResGuard {
    mappingFile = file("./resource_mapping.txt")
    use7zip = false
    useSign = true
    // It will keep the origin path of your resources when it's true
    keepRoot = false
    // If set, name column in arsc those need to proguard will be kept to this value
    fixedResName = "arg"
    // It will merge the duplicated resources, but don't rely on this feature too much.
    // it's always better to remove duplicated resource from repo
    mergeDuplicatedRes = true
    // add <yourpackagename>.R.drawable.icon into whitelist.
    // because the launcher will get the icon with his name
    whiteList = [
            // your icon
            "R.mipmap.ic_launcher",
            "R.mipmap.ic_launcher_round",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services.json
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"]
    compressFilePattern = ["*.png",
                           "*.jpg",
                           "*.jpeg",
                           "*.gif"]
    sevenzip {
        artifact = "com.tencent.mm:SevenZip:${andResGuard_sevenzip_version}"
        //path = "/usr/local/bin/7za"
    }

    /**
     * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
     * to the path which assemble[Task] write to*/
    finalApkBackupPath = "signed-backup.apk"
    digestalg = "SHA-256"
}

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"
    defaultConfig {
        applicationId "th.co.mfec.pornthep"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode
        versionName project.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debugApp {
            keyAlias 'nonnyzcsrt'
            keyPassword 'P@ssw0rd'
            storeFile rootProject.file('keystore/appKeystore.jks')
            storePassword 'P@ssw0rd'
        }
        releaseApp {
            keyAlias 'nonnyzcsrt'
            keyPassword 'P@ssw0rd'
            storeFile rootProject.file('keystore/appKeystore.jks')
            storePassword 'P@ssw0rd'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debugApp
        }
        release {
            signingConfig signingConfigs.releaseApp
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "dev"
    productFlavors {
        dev {
            applicationIdSuffix ".dev"
            resValue "string", "serverUrl", ""
        }

        uat {
            applicationIdSuffix ".uat"
            resValue "string", "serverUrl", ""
        }

        prod {
            applicationIdSuffix ".prod"
            resValue "string", "serverUrl", ""
        }

    }


    androidExtensions {
        experimental = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    afterEvaluate {
        tasks.matching {
            (it.name == "assembleDevRelease")
        }.each { task ->
            task.finalizedBy("resguardDevRelease")
        }

        tasks.matching {
            (it.name == "assembleUatRelease")
        }.each { task ->
            task.finalizedBy("resguardUatRelease")
        }

        tasks.matching {
            (it.name == "assembleProdRelease")
        }.each { task ->
            task.finalizedBy("resguardProdRelease")
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation "org.koin:koin-android:${koinVersion}"
    implementation "org.koin:koin-androidx-scope:${koinVersion}"
    implementation "org.koin:koin-androidx-viewmodel:${koinVersion}"

    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    implementation("com.squareup.okhttp3:okhttp:${okHttpVersion}")
    implementation "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"

    implementation "androidx.room:room-runtime:${roomVersion}"
    kapt "androidx.room:room-compiler:${roomVersion}"
    implementation "androidx.room:room-ktx:${roomVersion}"

    implementation "androidx.recyclerview:recyclerview:${recyclerViewVersion}"

    //Permission
    implementation "com.github.tbruyelle:rxpermissions:${rxPermissionVersion}"


    //Security
    //Encrypt SharedPreferences
    implementation "androidx.security:security-crypto:${securityCryptoVersion}"

    //Root Detection
    implementation "com.scottyab:rootbeer-lib:${rootBearVersion}"

    //Log
    implementation "com.jakewharton.timber:timber:${timberVersion}"


}
